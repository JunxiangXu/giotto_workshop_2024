[["interoperability-with-other-frameworks.html", "14 Interoperability with other frameworks 14.1 Load Giotto object 14.2 SpatialExperiment 14.3 Identify top spatially variable genes with nnSVG 14.4 Seurat 14.5 AnnData/SpatialData", " 14 Interoperability with other frameworks Iqra August 7th 2024 Giotto facilitates seamless interoperability with various tools, including Seurat, annData, and SpatialExperiment. Below is a brief introductory tutorial on how Giotto interoperates with these other tools. 14.1 Load Giotto object To begin the interoperability of a Giotto object with other objects, we first load the required libraries and a Giotto mini object. We then continue with the conversion process: library(Giotto) library(GiottoData) Here we load Giotto mini Visium object to continue with the interoperability. gobject &lt;- GiottoData::loadGiottoMini(&quot;visium&quot;) 14.2 SpatialExperiment The Giotto package is interoperable with SpatialExperiment, extending its functionality to include spatial coordinates, images, and image metadata. To start the conversion of a Giotto mini Visium object to a SpatialExperiment object, we first load the required libraries. library(SpatialExperiment) library(ggspavis) library(pheatmap) library(scater) library(scran) library(nnSVG) 14.2.1 Convert Giotto Object to SpatialExperiment Object To convert the Giotto object to a SpatialExperiment object, we use the giottoToSpatialExperiment() function. gspe &lt;- giottoToSpatialExperiment(gobject) The converter function returns a separate SpatialExperiment object for each spatial unit. The output is a list of objects (one for each unit), and we select the first object for downstream use. spe &lt;- gspe[[1]] 14.3 Identify top spatially variable genes with nnSVG We employ the nnSVG package to identify the top spatially variable genes in our SpatialExperiment object.Covariates can be added to our model; in this example, we use Leiden clustering labels as a covariate. These clustering results were initially computed using the Giotto suite and then transferred to the converted SpatialExperiment object. # One of the assays should be &quot;logcounts&quot; # We rename the normalized assay to &quot;logcounts&quot; assayNames(spe)[[2]] &lt;- &quot;logcounts&quot; # Create model matrix for leiden clustering labels X &lt;- model.matrix(~ colData(spe)$leiden_clus) dim(X) # Run nnSVG spe &lt;- nnSVG(spe, X = X) # Show top 10 features rowData(spe)[order(rowData(spe)$rank)[1:10], ]$feat_ID 14.3.1 Conversion of SpatialExperiment object back to Giotto We then convert the processed SpatialExperiment object back into a Giotto object for further downstream analysis using the Giotto suite. This is done using the spatialExperimentToGiotto function, where we explicitly specify the spatial network from the SpatialExperiment object. giottoFromSPE &lt;- spatialExperimentToGiotto(spe = spe, python_path = NULL, sp_network = &quot;Delaunay_network&quot;) print(giottoFromSPE) 14.3.2 Plotting top genes from nnSVG in Giotto Now, we visualize the genes previously identified in the SpatialExperiment object using the nnSVG package within the Giotto toolkit, leveraging the converted Giotto object. ext_spatial_genes &lt;- getFeatureMetadata(giottoFromSPE, output = &quot;data.table&quot;) ext_spatial_genes &lt;- ext_spatial_genes[order(ext_spatial_genes$rank)[1:10], ]$feat_ID spatFeatPlot2D(giottoFromSPE, expression_values = &#39;scaled_rna_cell&#39;, feats = ext_spatial_genes[1:4], point_size = 2) 14.4 Seurat The process of conversion between Giotto and Seurat relies on four main functions. giottoToSeuratV4 and seuratToGiottoV4 are designed for Seurat version 4, whereas giottoToSeuratV5 and seuratToGiottoV5 are specifically for Seurat version 5. In this demonstration, we will only cover the conversion between Seurat version 5 and Giotto. 14.4.1 Giotto to Seurat To convert Giotto object to Seurat V5 object, we first load required libraries and use the function giottoToSeuratV5() function library(Seurat) gToS &lt;- giottoToSeuratV5(gobject = gobject, spat_unit = &quot;cell&quot;) 14.5 AnnData/SpatialData To convert the giotto object to annData, we use the Giotto’s function “giottoToAnnData()” gToAnnData &lt;- giottoToAnnData(gobject) already nn in giotto for giotto generate nn network in giotto and use it in anndata for visualization use scanpy to generate umap from nn use scanpy to visualize scanpy clustering with umap visuals Optional: similary anndata and preprocessing on anndata QC, Normalization, feature selection, pca now convert giotto use giotto function to visualize umap etc "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
